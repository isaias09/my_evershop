import { Client, AnyVariables, CombinedError, Operation, OperationContext, OperationResult, TypedDocumentNode, RequestPolicy, GraphQLRequestParams } from '@urql/core';
export * from '@urql/core';
import * as react from 'react';
import { ReactElement } from 'react';
import { DocumentNode } from 'graphql';

declare const Context: react.Context<Client>;
declare const Provider: react.Provider<Client>;
declare const Consumer: react.Consumer<Client>;
declare const useClient: () => Client;

interface UseMutationState<Data = any, Variables extends AnyVariables = AnyVariables> {
    fetching: boolean;
    stale: boolean;
    data?: Data;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation<Data, Variables>;
}
type UseMutationResponse<Data = any, Variables extends AnyVariables = AnyVariables> = [
    UseMutationState<Data, Variables>,
    (variables: Variables, context?: Partial<OperationContext>) => Promise<OperationResult<Data, Variables>>
];
declare function useMutation<Data = any, Variables extends AnyVariables = AnyVariables>(query: DocumentNode | TypedDocumentNode<Data, Variables> | string): UseMutationResponse<Data, Variables>;

type UseQueryArgs<Variables extends AnyVariables = AnyVariables, Data = any> = {
    requestPolicy?: RequestPolicy;
    context?: Partial<OperationContext>;
    pause?: boolean;
} & GraphQLRequestParams<Data, Variables>;
interface UseQueryState<Data = any, Variables extends AnyVariables = AnyVariables> {
    fetching: boolean;
    stale: boolean;
    data?: Data;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation<Data, Variables>;
}
type UseQueryResponse<Data = any, Variables extends AnyVariables = AnyVariables> = [
    UseQueryState<Data, Variables>,
    (opts?: Partial<OperationContext>) => void
];
declare function useQuery<Data = any, Variables extends AnyVariables = AnyVariables>(args: UseQueryArgs<Variables, Data>): UseQueryResponse<Data, Variables>;

type UseSubscriptionArgs<Variables extends AnyVariables = AnyVariables, Data = any> = {
    pause?: boolean;
    context?: Partial<OperationContext>;
} & GraphQLRequestParams<Data, Variables>;
type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;
interface UseSubscriptionState<Data = any, Variables extends AnyVariables = AnyVariables> {
    fetching: boolean;
    stale: boolean;
    data?: Data;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation<Data, Variables>;
}
type UseSubscriptionResponse<Data = any, Variables extends AnyVariables = AnyVariables> = [
    UseSubscriptionState<Data, Variables>,
    (opts?: Partial<OperationContext>) => void
];
declare function useSubscription<Data = any, Result = Data, Variables extends AnyVariables = AnyVariables>(args: UseSubscriptionArgs<Variables, Data>, handler?: SubscriptionHandler<Data, Result>): UseSubscriptionResponse<Result, Variables>;

interface MutationProps<Data = any, Variables extends AnyVariables = AnyVariables> {
    query: DocumentNode | TypedDocumentNode<Data, Variables> | string;
    children: (arg: MutationState<Data, Variables>) => ReactElement<any>;
}
interface MutationState<Data = any, Variables extends AnyVariables = AnyVariables> extends UseMutationState<Data, Variables> {
    executeMutation: (variables: Variables, context?: Partial<OperationContext>) => Promise<OperationResult<Data, Variables>>;
}
declare function Mutation<Data = any, Variables extends AnyVariables = AnyVariables>(props: MutationProps<Data, Variables>): ReactElement<any>;

type QueryProps<Data = any, Variables extends AnyVariables = AnyVariables> = UseQueryArgs<Variables, Data> & {
    children: (arg: QueryState<Data, Variables>) => ReactElement<any>;
};
interface QueryState<Data = any, Variables extends AnyVariables = AnyVariables> extends UseQueryState<Data, Variables> {
    executeQuery: (opts?: Partial<OperationContext>) => void;
}
declare function Query<Data = any, Variables extends AnyVariables = AnyVariables>(props: QueryProps<Data, Variables>): ReactElement<any>;

type SubscriptionProps<Data = any, Result = Data, Variables extends AnyVariables = AnyVariables> = UseSubscriptionArgs<Variables, Data> & {
    handler?: SubscriptionHandler<Data, Result>;
    children: (arg: SubscriptionState<Result, Variables>) => ReactElement<any>;
};
interface SubscriptionState<Data = any, Variables extends AnyVariables = AnyVariables> extends UseSubscriptionState<Data, Variables> {
    executeSubscription: (opts?: Partial<OperationContext>) => void;
}
declare function Subscription<Data = any, Result = Data, Variables extends AnyVariables = AnyVariables>(props: SubscriptionProps<Data, Result, Variables>): ReactElement<any>;

export { Consumer, Context, Mutation, MutationProps, MutationState, Provider, Query, QueryProps, QueryState, Subscription, SubscriptionHandler, SubscriptionProps, SubscriptionState, UseMutationResponse, UseMutationState, UseQueryArgs, UseQueryResponse, UseQueryState, UseSubscriptionArgs, UseSubscriptionResponse, UseSubscriptionState, useClient, useMutation, useQuery, useSubscription };
